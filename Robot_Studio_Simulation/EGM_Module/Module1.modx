MODULE Module1
    ! ## =========================================================================== ## 
    ! Author   : Johnny YÃ©pez
    ! Email    : johnnyjavier.yepez@uc3m.es
    ! Github   : https://github.com/YEPEZ25
    ! File Name: T_ROB1/Module1.mod
    ! ## =========================================================================== ## 
    
    ! Identifier for the EGM correction
    LOCAL VAR egmident egm_id;
    ! EGM pose frames
    LOCAL CONST pose egm_correction_frame := [[0, 0, 0], [1, 0, 0, 0]];
    LOCAL CONST pose egm_sensor_frame     := [[0, 0, 0], [1, 0, 0, 0]];
    ! The work object. Base Frame
    LOCAL PERS wobjdata egm_wobj := [FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
    ! Limits for convergence
    ! Cartesian: +-0.1 mm
    LOCAL CONST egm_minmax egm_condition_cartesian := [-0.1, 0.1];
    ! Orientation: +-0.1 degrees
    LOCAL CONST egm_minmax egm_condition_orient := [-0.1, 0.1];
    
    ! Center Position
    LOCAL CONST num CENTER_POSITION{3} := [500.0,0.0,400.0];
    CONST robtarget Target_10:=[[602.634726557,22.568850919,559.884497663],[0.031871841,0.000078439,-0.99948939,0.002266967],[0,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    VAR jointtarget pHome;
    
    !  SOCKET
    CONST string socket_ip := "127.0.0.1";
    CONST num socket_port := 6061; 
    VAR socketdev serverSocket;
    VAR socketdev clientSocket;
    
    ! Description:                                         !
    ! Externally Guided motion (EGM): Control - Main Cycle !
    PROC Main()
        ! Adjust the right end-effector of the robot arm.
        !   1\ Without EE: tool0
        !       Example: MoveL Target_Auxiliary,v100,fine,CONST_EE_TOOL_EGP_C_40\WObj:=wobj0;
        !   2\ Schunk EE: CONST_EE_TOOL_EGP_C_40
        !       Example: MoveL Target_Auxiliary,v100,fine,CONST_EE_TOOL_EGP_C_40\WObj:=wobj0;
        
        !SOCKET
        SocketCreate serverSocket;
        SocketBind serverSocket, socket_ip , socket_port;
        SocketListen serverSocket;
        SocketAccept serverSocket, clientSocket, \Time:=WAIT_MAX;

        ! EGM Cartesian Control
        EGM_CARTESIAN_CONTROL;
         
    ENDPROC
    
    PROC EGM_CARTESIAN_CONTROL()
        ! Description:                                       !
        ! Externally Guided motion (EGM) - Cartesian Control !
    
        ! Register an EGM id
        EGMGetId egm_id;
            
        ! Setup the EGM communication
        EGMSetupUC ROB_1, egm_id, "default", "ROB_1", \Pose;
            
        ! Prepare for an EGM communication session
        EGMActPose egm_id,
                    \StreamStart
                    \Tool:=tool0,
                    \WObj:=egm_wobj,
                    egm_correction_frame,
                    EGM_FRAME_BASE,
                    egm_sensor_frame,
                    EGM_FRAME_BASE
                    \X:=egm_condition_cartesian
                    \Y:=egm_condition_cartesian
                    \Z:=egm_condition_cartesian
                    \Rx:=egm_condition_orient
                    \Ry:=egm_condition_orient
                    \Rz:=egm_condition_orient
                    \LpFilter:=100
                    \SampleRate:=8
                    \MaxPosDeviation:=1000
                    \MaxSpeedDeviation:=1000;
                    
        FOR i FROM 1 TO 6 DO
            MoveSecurityPosition i;
        ENDFOR
    
        ! EGM While {Cartesian}
        WHILE TRUE DO
            !TPWrite "movement ";
            ! Start the EGM communication session
            EGMRunPose egm_id, EGM_STOP_HOLD, \X \Y \Z \Rx \Ry \Rz \CondTime:=1.0 \RampInTime:=0.1 \RampOutTime:=0.1 \PosCorrGain:=1.0;
            !TPWrite "moved";
            ! Release the EGM id
            !EGMReset egm_id;
            ! Wait 2 seconds {No data from EGM sensor}
            !WaitTime 2;
          
        ENDWHILE
        
        ERROR
        IF ERRNO = ERR_UDPUC_COMM THEN
            TPWrite "Communication timeout: EGM";
            TRYNEXT;
        ENDIF
        IF ERRNO = ERR_SOCK_TIMEOUT THEN
            RETRY;
        ELSE
            TPWrite "ERROR = "\Num:=ERRNO;
            SocketClose clientSocket;
            SocketClose serverSocket;
            SocketCreate serverSocket;
            SocketBind serverSocket, socket_ip , socket_port;
            SocketListen serverSocket;
            RETRY;
        ENDIF
            
    ENDPROC
    

  PROC MoveSecurityPosition(num i)
      pHome := CJointT();
      IF i=1 THEN
          pHome.robax.rax_1 := 0;
      ELSEIF i=2 THEN
          pHome.robax.rax_2 := 0;
      ELSEIF i=3 THEN
          pHome.robax.rax_3 := 0;
      ELSEIF i=4 THEN
          pHome.robax.rax_4 := 0;
      ELSEIF i=5 THEN
          pHome.robax.rax_5 := 90;  
      ELSEIF i=6 THEN
          pHome.robax.rax_6 := 90;
      ENDIF
      MoveAbsJ pHome, v100, fine, tool0;
  ENDPROC

ENDMODULE






   
